@inject ISnackbar _snackbar
@inject IUserCaller _userCaller

<MudCarouselItem Transition="Transition.Slide">
    <MudCardHeader Class="justify-center">
        <CardHeaderAvatar>
            <MudIcon Icon="@Icons.Filled.AppRegistration" Size="Size.Large" />
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo="Typo.h5">عضویت</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudButton Class="mt-2" Variant="Variant.Text" OnClick="NextCarouseAction.Invoke">
                حساب دارید؟ هم اکنون وارد
                شوید
            </MudButton>
        </CardHeaderActions>
    </MudCardHeader>
    <MudDivider DividerType="DividerType.Middle" />

    <MudForm @ref="_form" @bind-IsValid="_isSuccess" @bind-Errors="_errors" Model="_model">
        <MudCardContent>
            <MudRTLProvider RightToLeft="false">

                <MudTextField @bind-Value="_model.FirstName"
                              Validation="@(_modelValidator.ValidateValue)"
                              For="@(() => _model.FirstName)"
                              Immediate="true"
                              Label="نام" />

                <MudTextField @bind-Value="_model.LastName"
                              Validation="@(_modelValidator.ValidateValue)"
                              For="@(() => _model.LastName)"
                              Immediate="true"
                              Label="نام خانوادگی" />

                <MudTextField @bind-Value="_model.UserName"
                              Validation="@(_modelValidator.ValidateValue)"
                              For="@(() => _model.UserName)"
                              Immediate="true"
                              Label="نام کاربری" />

                <MudTextField @bind-Value="_model.Email"
                              Validation="@(_modelValidator.ValidateValue)"
                              For="@(() => _model.Email)"
                              Immediate="true"
                              Label="ایمیل"
                              InputType="InputType.Email" />

                <MudTextField @bind-Value="_model.Password"
                              Validation="@(_modelValidator.ValidateValue)"
                              For="@(() => _model.Password)"
                              Immediate="true"
                              Label="رمز عبور"
                              InputType="InputType.Password" />

                <MudTextField @bind-Value="_model.RepeatPassword"
                              Validation="@(_modelValidator.ValidateValue)"
                              For="@(() => _model.RepeatPassword)"
                              Immediate="true"
                              Label="تکرار رمز عبور"
                              InputType="InputType.Password" />

            </MudRTLProvider>
        </MudCardContent>
        <MudDivider DividerType="DividerType.Middle" Class="mt-2" />

        <MudCardActions Class="mt-2">
            <MudButton Class="mt-2" Color="Color.Primary" Variant="Variant.Filled" Disabled="!_isSuccess" OnClick="Register">عضویت</MudButton>
        </MudCardActions>
    </MudForm>
</MudCarouselItem>

@code {
    [Parameter, EditorRequired]
    public Action NextCarouseAction { get; set; } = null!;

    private MudForm _form = new();
    private bool _isSuccess = false;
    private string[] _errors = { };

    private RegisterDto _model = new();
    private RegisterDtoFluentValidator _modelValidator = new();

    private async Task Register()
    {
        await _form.Validate();
        if (_isSuccess)
        {
            var result = await _userCaller.Register(_model);
            if (result.StatusCode == HttpStatusCode.OK)
            {
                await HandleSuccessResult(result);
            }
            else if (result.StatusCode == HttpStatusCode.BadRequest)
            {
                var content = await result.Content.ReadFromJsonAsync<ValidationResult>();
                if (content != null)
                {
                    _snackbar.AddErrorList(content.Errors.Select(p => p.ErrorMessage));
                }
            }
            else
            {
                _snackbar.AddUnknownError();
            }
        }
    }

    private async Task HandleSuccessResult(HttpResponseMessage responseMessage)
    {
        var content = await responseMessage.Content.ReadFromJsonAsync<DbResponse<RegisterDto, RegisterError>>();
        if (content == null)
        {
            _snackbar.AddUnknownError();
            return;
        }

        if (content.Success)
        {
            _snackbar.Add("ثبت نام با موفقیت انجام شد.", Severity.Success);
            NextCarouseAction.Invoke();
        }
        else
        {
            _snackbar.AddErrorList(content.Errors.Values);
        }
    }

}
